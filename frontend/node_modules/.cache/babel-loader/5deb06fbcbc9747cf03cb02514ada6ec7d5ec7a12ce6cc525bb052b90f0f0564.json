{"ast":null,"code":"import axios from 'axios';\n// API Configuration\nconst API_CONFIG = {\n  baseUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 30000,\n  retries: 3\n};\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_CONFIG.baseUrl,\n  timeout: API_CONFIG.timeout,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`üöÄ API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('‚ùå API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('‚ùå API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// API Functions\nexport const apiService = {\n  // Health Check\n  async getHealth() {\n    const response = await api.get('/health');\n    return response.data;\n  },\n  // File Upload\n  async uploadFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/upload/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Database Connection\n  async connectDatabase(dbUrl) {\n    const request = {\n      db_url: dbUrl\n    };\n    const response = await api.post('/connect-db/', request);\n    return response.data;\n  },\n  // Data Ingestion\n  async startIngestion() {\n    const response = await api.post('/ingest/');\n    return response.data;\n  },\n  // Chat\n  async sendChatMessage(query) {\n    const request = {\n      query\n    };\n    const response = await api.post('/chat/', request);\n    return response.data;\n  },\n  // Get Files\n  async getFiles() {\n    const response = await api.get('/files/');\n    return response.data;\n  },\n  // Get Chunks\n  async getChunks() {\n    const response = await api.get('/chunks/');\n    return response.data;\n  }\n};\n\n// Error handling utility\nexport const handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response3, _error$response3$data;\n  if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error) {\n    return error.response.data.error;\n  }\n  if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.detail) {\n    return error.response.data.detail;\n  }\n  if (error.message) {\n    return error.message;\n  }\n  return 'An unexpected error occurred';\n};\n\n// Retry utility\nexport const withRetry = async (fn, retries = API_CONFIG.retries) => {\n  try {\n    return await fn();\n  } catch (error) {\n    if (retries > 0) {\n      console.log(`üîÑ Retrying... (${retries} attempts left)`);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return withRetry(fn, retries - 1);\n    }\n    throw error;\n  }\n};\n\n// API Status Check\nexport const checkApiStatus = async () => {\n  try {\n    await apiService.getHealth();\n    return true;\n  } catch (error) {\n    console.error('‚ùå API Status Check Failed:', error);\n    return false;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","baseUrl","process","env","REACT_APP_API_URL","timeout","retries","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","apiService","getHealth","get","uploadFile","file","formData","FormData","append","post","connectDatabase","dbUrl","db_url","startIngestion","sendChatMessage","query","getFiles","getChunks","handleApiError","_error$response2","_error$response2$data","_error$response3","_error$response3$data","detail","withRetry","fn","resolve","setTimeout","checkApiStatus"],"sources":["E:/Nagendra/projects/PrivAI/privai-app/frontend/src/utils/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport {\r\n  HealthResponse,\r\n  UploadResponse,\r\n  DatabaseRequest,\r\n  DatabaseResponse,\r\n  IngestResponse,\r\n  ChatRequest,\r\n  ChatResponse,\r\n  ErrorResponse\r\n} from '../types';\r\n\r\n// API Configuration\r\nconst API_CONFIG = {\r\n  baseUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n  timeout: 30000,\r\n  retries: 3\r\n};\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_CONFIG.baseUrl,\r\n  timeout: API_CONFIG.timeout,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for logging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('‚ùå API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('‚ùå API Response Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API Functions\r\nexport const apiService = {\r\n  // Health Check\r\n  async getHealth(): Promise<HealthResponse> {\r\n    const response: AxiosResponse<HealthResponse> = await api.get('/health');\r\n    return response.data;\r\n  },\r\n\r\n  // File Upload\r\n  async uploadFile(file: File): Promise<UploadResponse> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    \r\n    const response: AxiosResponse<UploadResponse> = await api.post('/upload/', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Database Connection\r\n  async connectDatabase(dbUrl: string): Promise<DatabaseResponse> {\r\n    const request: DatabaseRequest = { db_url: dbUrl };\r\n    const response: AxiosResponse<DatabaseResponse> = await api.post('/connect-db/', request);\r\n    return response.data;\r\n  },\r\n\r\n  // Data Ingestion\r\n  async startIngestion(): Promise<IngestResponse> {\r\n    const response: AxiosResponse<IngestResponse> = await api.post('/ingest/');\r\n    return response.data;\r\n  },\r\n\r\n  // Chat\r\n  async sendChatMessage(query: string): Promise<ChatResponse> {\r\n    const request: ChatRequest = { query };\r\n    const response: AxiosResponse<ChatResponse> = await api.post('/chat/', request);\r\n    return response.data;\r\n  },\r\n\r\n  // Get Files\r\n  async getFiles(): Promise<{ files: string[]; count: number }> {\r\n    const response = await api.get('/files/');\r\n    return response.data;\r\n  },\r\n\r\n  // Get Chunks\r\n  async getChunks(): Promise<{ chunks: any[]; count: number }> {\r\n    const response = await api.get('/chunks/');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Error handling utility\r\nexport const handleApiError = (error: any): string => {\r\n  if (error.response?.data?.error) {\r\n    return error.response.data.error;\r\n  }\r\n  if (error.response?.data?.detail) {\r\n    return error.response.data.detail;\r\n  }\r\n  if (error.message) {\r\n    return error.message;\r\n  }\r\n  return 'An unexpected error occurred';\r\n};\r\n\r\n// Retry utility\r\nexport const withRetry = async <T>(\r\n  fn: () => Promise<T>,\r\n  retries: number = API_CONFIG.retries\r\n): Promise<T> => {\r\n  try {\r\n    return await fn();\r\n  } catch (error) {\r\n    if (retries > 0) {\r\n      console.log(`üîÑ Retrying... (${retries} attempts left)`);\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      return withRetry(fn, retries - 1);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// API Status Check\r\nexport const checkApiStatus = async (): Promise<boolean> => {\r\n  try {\r\n    await apiService.getHealth();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('‚ùå API Status Check Failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}