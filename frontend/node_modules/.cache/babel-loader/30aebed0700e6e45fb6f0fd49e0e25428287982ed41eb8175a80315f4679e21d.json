{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\n// Initial app state\nconst initialState = {\n  currentPage: 'upload',\n  uploadedFiles: [],\n  processedChunks: [],\n  isUploading: false,\n  isProcessing: false,\n  isChatting: false,\n  chatHistory: [],\n  error: null\n};\nexport function useAppState() {\n  _s();\n  const [appState, setAppState] = useState(initialState);\n\n  // Update app state\n  const updateAppState = useCallback(updates => {\n    setAppState(prevState => ({\n      ...prevState,\n      ...updates\n    }));\n  }, []);\n\n  // Navigate to page\n  const navigateToPage = useCallback(page => {\n    updateAppState({\n      currentPage: page\n    });\n  }, [updateAppState]);\n\n  // Add uploaded file\n  const addUploadedFile = useCallback(file => {\n    updateAppState(prevState => ({\n      uploadedFiles: [...prevState.uploadedFiles, file]\n    }));\n  }, [updateAppState]);\n\n  // Remove uploaded file\n  const removeUploadedFile = useCallback(fileId => {\n    updateAppState(prevState => ({\n      uploadedFiles: prevState.uploadedFiles.filter(file => file.file_id !== fileId)\n    }));\n  }, [updateAppState]);\n\n  // Clear all files\n  const clearAllFiles = useCallback(() => {\n    updateAppState({\n      uploadedFiles: []\n    });\n  }, [updateAppState]);\n\n  // Add processed chunks\n  const addProcessedChunks = useCallback(chunks => {\n    updateAppState(prevState => ({\n      processedChunks: [...prevState.processedChunks, ...chunks]\n    }));\n  }, [updateAppState]);\n\n  // Clear all chunks\n  const clearAllChunks = useCallback(() => {\n    updateAppState({\n      processedChunks: []\n    });\n  }, [updateAppState]);\n\n  // Add chat message\n  const addChatMessage = useCallback(message => {\n    updateAppState(prevState => ({\n      chatHistory: [...prevState.chatHistory, message]\n    }));\n  }, [updateAppState]);\n\n  // Clear chat history\n  const clearChatHistory = useCallback(() => {\n    updateAppState({\n      chatHistory: []\n    });\n  }, [updateAppState]);\n\n  // Set loading state\n  const setLoading = useCallback(loading => {\n    updateAppState(loading);\n  }, [updateAppState]);\n\n  // Set error\n  const setError = useCallback(error => {\n    updateAppState({\n      error\n    });\n  }, [updateAppState]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    updateAppState({\n      error: null\n    });\n  }, [updateAppState]);\n\n  // Reset app state\n  const resetAppState = useCallback(() => {\n    setAppState(initialState);\n  }, []);\n\n  // Get file by ID\n  const getFileById = useCallback(fileId => {\n    return appState.uploadedFiles.find(file => file.file_id === fileId);\n  }, [appState.uploadedFiles]);\n\n  // Get chunks by file ID\n  const getChunksByFileId = useCallback(fileId => {\n    return appState.processedChunks.filter(chunk => chunk.metadata.file_id === fileId);\n  }, [appState.processedChunks]);\n\n  // Get recent chat messages\n  const getRecentChatMessages = useCallback((limit = 10) => {\n    return appState.chatHistory.sort((a, b) => b.timestamp - a.timestamp).slice(0, limit);\n  }, [appState.chatHistory]);\n\n  // Check if file is uploaded\n  const isFileUploaded = useCallback(filename => {\n    return appState.uploadedFiles.some(file => file.filename === filename);\n  }, [appState.uploadedFiles]);\n\n  // Get total file size\n  const getTotalFileSize = useCallback(() => {\n    return appState.uploadedFiles.reduce((total, file) => total + file.size, 0);\n  }, [appState.uploadedFiles]);\n\n  // Get file count by type\n  const getFileCountByType = useCallback(() => {\n    const counts = {};\n    appState.uploadedFiles.forEach(file => {\n      const type = file.content_type;\n      counts[type] = (counts[type] || 0) + 1;\n    });\n    return counts;\n  }, [appState.uploadedFiles]);\n  return {\n    appState,\n    updateAppState,\n    navigateToPage,\n    addUploadedFile,\n    removeUploadedFile,\n    clearAllFiles,\n    addProcessedChunks,\n    clearAllChunks,\n    addChatMessage,\n    clearChatHistory,\n    setLoading,\n    setError,\n    clearError,\n    resetAppState,\n    getFileById,\n    getChunksByFileId,\n    getRecentChatMessages,\n    isFileUploaded,\n    getTotalFileSize,\n    getFileCountByType\n  };\n}\n_s(useAppState, \"bGl3Xfwi3jZh3SIuC3qxVZIAo2U=\");","map":{"version":3,"names":["useState","useCallback","initialState","currentPage","uploadedFiles","processedChunks","isUploading","isProcessing","isChatting","chatHistory","error","useAppState","_s","appState","setAppState","updateAppState","updates","prevState","navigateToPage","page","addUploadedFile","file","removeUploadedFile","fileId","filter","file_id","clearAllFiles","addProcessedChunks","chunks","clearAllChunks","addChatMessage","message","clearChatHistory","setLoading","loading","setError","clearError","resetAppState","getFileById","find","getChunksByFileId","chunk","metadata","getRecentChatMessages","limit","sort","a","b","timestamp","slice","isFileUploaded","filename","some","getTotalFileSize","reduce","total","size","getFileCountByType","counts","forEach","type","content_type"],"sources":["E:/Nagendra/projects/PrivAI/privai-app/frontend/src/hooks/useAppState.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { AppState, UploadedFile, ProcessedChunk, ChatMessage } from '../types';\r\n\r\n// Initial app state\r\nconst initialState: AppState = {\r\n  currentPage: 'upload',\r\n  uploadedFiles: [],\r\n  processedChunks: [],\r\n  isUploading: false,\r\n  isProcessing: false,\r\n  isChatting: false,\r\n  chatHistory: [],\r\n  error: null\r\n};\r\n\r\nexport function useAppState() {\r\n  const [appState, setAppState] = useState<AppState>(initialState);\r\n\r\n  // Update app state\r\n  const updateAppState = useCallback((updates: Partial<AppState>) => {\r\n    setAppState(prevState => ({\r\n      ...prevState,\r\n      ...updates\r\n    }));\r\n  }, []);\r\n\r\n  // Navigate to page\r\n  const navigateToPage = useCallback((page: string) => {\r\n    updateAppState({ currentPage: page });\r\n  }, [updateAppState]);\r\n\r\n  // Add uploaded file\r\n  const addUploadedFile = useCallback((file: UploadedFile) => {\r\n    updateAppState(prevState => ({\r\n      uploadedFiles: [...prevState.uploadedFiles, file]\r\n    }));\r\n  }, [updateAppState]);\r\n\r\n  // Remove uploaded file\r\n  const removeUploadedFile = useCallback((fileId: string) => {\r\n    updateAppState(prevState => ({\r\n      uploadedFiles: prevState.uploadedFiles.filter(file => file.file_id !== fileId)\r\n    }));\r\n  }, [updateAppState]);\r\n\r\n  // Clear all files\r\n  const clearAllFiles = useCallback(() => {\r\n    updateAppState({ uploadedFiles: [] });\r\n  }, [updateAppState]);\r\n\r\n  // Add processed chunks\r\n  const addProcessedChunks = useCallback((chunks: ProcessedChunk[]) => {\r\n    updateAppState(prevState => ({\r\n      processedChunks: [...prevState.processedChunks, ...chunks]\r\n    }));\r\n  }, [updateAppState]);\r\n\r\n  // Clear all chunks\r\n  const clearAllChunks = useCallback(() => {\r\n    updateAppState({ processedChunks: [] });\r\n  }, [updateAppState]);\r\n\r\n  // Add chat message\r\n  const addChatMessage = useCallback((message: ChatMessage) => {\r\n    updateAppState(prevState => ({\r\n      chatHistory: [...prevState.chatHistory, message]\r\n    }));\r\n  }, [updateAppState]);\r\n\r\n  // Clear chat history\r\n  const clearChatHistory = useCallback(() => {\r\n    updateAppState({ chatHistory: [] });\r\n  }, [updateAppState]);\r\n\r\n  // Set loading state\r\n  const setLoading = useCallback((loading: { uploading?: boolean; processing?: boolean; chatting?: boolean }) => {\r\n    updateAppState(loading);\r\n  }, [updateAppState]);\r\n\r\n  // Set error\r\n  const setError = useCallback((error: string | null) => {\r\n    updateAppState({ error });\r\n  }, [updateAppState]);\r\n\r\n  // Clear error\r\n  const clearError = useCallback(() => {\r\n    updateAppState({ error: null });\r\n  }, [updateAppState]);\r\n\r\n  // Reset app state\r\n  const resetAppState = useCallback(() => {\r\n    setAppState(initialState);\r\n  }, []);\r\n\r\n  // Get file by ID\r\n  const getFileById = useCallback((fileId: string) => {\r\n    return appState.uploadedFiles.find(file => file.file_id === fileId);\r\n  }, [appState.uploadedFiles]);\r\n\r\n  // Get chunks by file ID\r\n  const getChunksByFileId = useCallback((fileId: string) => {\r\n    return appState.processedChunks.filter(chunk => \r\n      chunk.metadata.file_id === fileId\r\n    );\r\n  }, [appState.processedChunks]);\r\n\r\n  // Get recent chat messages\r\n  const getRecentChatMessages = useCallback((limit: number = 10) => {\r\n    return appState.chatHistory\r\n      .sort((a, b) => b.timestamp - a.timestamp)\r\n      .slice(0, limit);\r\n  }, [appState.chatHistory]);\r\n\r\n  // Check if file is uploaded\r\n  const isFileUploaded = useCallback((filename: string) => {\r\n    return appState.uploadedFiles.some(file => file.filename === filename);\r\n  }, [appState.uploadedFiles]);\r\n\r\n  // Get total file size\r\n  const getTotalFileSize = useCallback(() => {\r\n    return appState.uploadedFiles.reduce((total, file) => total + file.size, 0);\r\n  }, [appState.uploadedFiles]);\r\n\r\n  // Get file count by type\r\n  const getFileCountByType = useCallback(() => {\r\n    const counts: { [key: string]: number } = {};\r\n    appState.uploadedFiles.forEach(file => {\r\n      const type = file.content_type;\r\n      counts[type] = (counts[type] || 0) + 1;\r\n    });\r\n    return counts;\r\n  }, [appState.uploadedFiles]);\r\n\r\n  return {\r\n    appState,\r\n    updateAppState,\r\n    navigateToPage,\r\n    addUploadedFile,\r\n    removeUploadedFile,\r\n    clearAllFiles,\r\n    addProcessedChunks,\r\n    clearAllChunks,\r\n    addChatMessage,\r\n    clearChatHistory,\r\n    setLoading,\r\n    setError,\r\n    clearError,\r\n    resetAppState,\r\n    getFileById,\r\n    getChunksByFileId,\r\n    getRecentChatMessages,\r\n    isFileUploaded,\r\n    getTotalFileSize,\r\n    getFileCountByType\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}